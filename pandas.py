# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f3NIDHAcxzAi68dMqEDIe81gVzwXnimX

# PANDAS (Panel Data) - A biblioteca mais importante de Python?

A biblioteca pandas pode ser considerada a mais importante dentro do mundo da análise de dados para o Python. É a ferramenta principal para construção de estrutura, manipulação e limpeza de dados, sendo também utilizada com bibliotecas de processamento numérico e construção de gráficos.

# Importando o Pandas e Numpy
"""

import pandas as pd
import numpy as np

"""# SERIES

Series é uma estrutura de dados <b>unidimensional</b> da biblioteca Pandas em Python, que é capaz de armazenar dados de diferentes tipos, incluindo inteiros, floats e strings. <br> 
É <b>semelhante a um array numpy, mas com rótulos de índice</b>, permitindo que os dados sejam acessados por rótulo, ao invés de apenas por posição. As séries podem ser criadas a partir de listas, dicionários e outras estruturas de dados.
"""

# Notar os indíces na esquerda
s1 = pd.Series([1,2,-5,0])
s1

s1.values

s1.index

s2 = pd.Series([1,2,-5,0], index=['a', 'b', 'c', 'd'])
s2

s2.index

s2['a'] = 1000
s2

"""# Comparação"""

s2[s2>0]

"""# Álgebra"""

s2*2

s2

s2.isnull()



"""# DATAFRAME

Um <b>dataframe</b> em Python é uma estrutura de dados bidimensional que permite armazenar e manipular dados tabulares de forma eficiente. Ele é uma das principais estruturas de dados da biblioteca pandas e pode ser pensado como uma <b>tabela de dados com linhas e colunas. </b><br>
<b>Um dataframe é formado por series :)</b>

# Criando um Dataframe
"""

# Criando um array, definindo os dados do dataframe
dados={'estado': ['SP', 'MG', 'PR', 'SP', 'MG', 'PR'], 'ano': [2019, 2019, 2020, 2020, 2020, 2020], 'pop': [45.9,21.2, 16.9, 46.6, 21.4, 17.3]}
# Criando o DataFrame com o array dados
df1 = pd.DataFrame(dados)
df1

"""# Visualizar partes do DataFrame

"""

# Head - exibe n valores do topo
df1.head(2)

# Tail - exibe n valores do final
df1.tail(2)

# Sample - exibe aleatoriamente n valores do DataFrame
df1.sample(2)

"""# Gerando um novo DataFrame a partir do anterior"""

# Gerando um novo DataFrame e definindo a ordem das colunas que eu quero que apareça:
df2 = pd.DataFrame(dados, columns=['ano', 'estado', 'pop'])
df2

"""# Observando o DataFrame"""

df2['estado']

df2.ano

# dtypes - mostra o tipo de cada coluna
# notar que cada coluna pode ter um tipo diferente
df2.dtypes

"""# Atribuindo Valores"""

# Criando uma coluna nova através do df2['estimativa]
# e atribuindo o valor 50 a todas as linhas ( = 50)
df2['estimativa'] = 50
df2

# Alterando os valores da coluna estimativa para valores de 0 a 5
df2['estimativa'] = np.arange(6)
df2

# Criando um novo DataFrame a partir do DataFrame df2
df3 = df2
df3

# Alterando o df3 para somente um recorte do df2, neste caso somente a coluna ano
df3 = df2['ano']
df3

# Gerando uma nova coluna com o resultado da comparação de uma coluna do df2
df2['Não Paraná'] = df2.estado != 'PR'
df2

"""# Excluir Coluna"""

del df2['Não Paraná']
df2

"""# Entender o DataFrame"""

# Shape - mostra o tamanho do dataframe
# Neste caso, df2 tem 6 linhas e 4 colunas
df2.shape

# Exibe a quantidade de linhas da tabela
df2.shape[0]

# Exibe a quantidade de colunas da tabela
df2.shape[1]

# Index - exibe o index da tabela
# neste caso, de 0 a 6, de um em um. ou seja: 0 1 2 3 4 5
df2.index

# Columns - exibe as colunas da tabela
df2.columns

# Count - exibe quantos valores tem em cada coluna
df2.count()

"""# Alterar Informação das Colunas"""

# Recriando o nome das colunas
df2.columns = ['Ano', 'Estado', 'Populacao', 'Estimativa']
df2

"""# Analisar o DataFrame"""

df2.describe()

df2.describe(include='all')

"""# Alterar valores e consultar dados"""

df2['Ano'] = df2['Ano'] + 2
df2

# Exibe somente os valores na coluna ano, em que ano é maior que 2021
# neste caso, é feito somente uma consulta, não é alterado o DataFrame
df2[ df2['Ano'] > 2021 ]

# Criando um novo DataFrame com o resultado da comparação
df4 = df2[ df2['Ano'] > 2021 ]
df4

"""# Exluir Colunas"""

df4.drop('Ano', axis='columns')

df4

df4.drop('Ano', axis='columns', inplace=True)
df4

"""# Excluir Linhas"""

df2.drop([0,1]) #exclui mas não altera o valor do DataFrame original

df2

"""# Observe a propagação na exclusão definitiva"""

# Criei uma cópia do df2, desta forma, tudo que eu fizer no dflinhas vai ser feito também no df2
dflinhas = df2

dflinhas.drop([2,3],inplace=True)
dflinhas

df2

"""# Ver dados de linhas"""

df2.iloc[0]

df2.iloc[1:3]

df2.iloc[1:3,[1,2]]

df2